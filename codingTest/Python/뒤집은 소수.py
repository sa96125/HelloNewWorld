# 뒤집은 소수
# n개의 자연수가 주어지면, 각 자연수를 뒤집은 후 그 뒤집어진 수가 소수이면 그 수를 출력하는 프로그램을 작성하여라.
# 예를들어 32을 뒤집으면 23고 23은 소수이다. 따라서 32를 출력. 단 910을 뒤집으면 19로 숫자화 해야한다.
# 뒤집은 함수인 reverse()함수와 소수인지 확인하는 함수 isPrime()함수를 꼭 작성하여라.
# ⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈⨈

def isPrime(x):
    cash = [0]*(x+1)
    listPrime = []

    for i in range(2, x+1):
        if cash[i] != 0:
            continue
        listPrime.append(i)
        for j in range(1, x//i+1):
            cash[i*j] = 1

    return listPrime


def reverse(x):
    y = x[::-1]
    return y


n = int(input())
numberList = list(input().split())

for i in numberList:
    numReverse = int(reverse(i))
    if numReverse not in isPrime(int(i)):
        continue
    print(numReverse, end=" ")

# ⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇⨇
# 풀이:
#   1. 소수를 만드는 함수를 만들어 분리시킨다.
#   2. 이전에 배운 에스테라토스의 체를 이용하여 소수함수를 구현하고, 배열의 인덱싱을 이용해서 리버스함수를 만든다.

# 문제:
#   출력 값 형식.

# 해결:
#   print(sep="", end="")

# 느낀점:
#   사실 이제껏 함수를 분리시켜서 사용하는 코드는 그렇게 많이 경험하지 못했는데
#   최근 자바스크립트 콜백함수, 비동기적 실행원리를 공부한 후, 머리 속에 함수를 어떻게 실행하고 분리해야하는지 감이 와서 바로 작성하였다.
#   누구에게는 정말 쉬운 문제지만 해결하니 정말 뿌듯하다:)
