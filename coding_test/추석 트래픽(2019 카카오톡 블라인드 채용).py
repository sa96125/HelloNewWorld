# 추석 트래픽(2019 카카오톡 블라인드 채용)

# 이번 추석에도 시스템 장애가 없는 명절을 보내고 싶은 어피치는 서버를 증설해야 할지 고민이다. 
# 장애 대비용 서버 증설 여부를 결정하기 위해 작년 추석 기간인 9월 15일 로그 데이터를 분석한 후 초당 최대 처리량을 계산해보기로 했다. 
# 초당 최대 처리량은 요청의 응답 완료 여부에 관계없이 임의 시간부터 1초(=1,000밀리초)간 처리하는 요청의 최대 개수를 의미한다.

# 입력 형식
# solution 함수에 전달되는 lines 배열은 N(1 ≦ N ≦ 2,000)개의 로그 문자열로 되어 있으며, 각 로그 문자열마다 요청에 대한 응답완료시간 S와 처리시간 T가 공백으로 구분되어 있다.
# 응답완료시간 S는 작년 추석인 2016년 9월 15일만 포함하여 고정 길이 2016-09-15 hh:mm:ss.sss 형식으로 되어 있다.
# 처리시간 T는 0.1s, 0.312s, 2s 와 같이 최대 소수점 셋째 자리까지 기록하며 뒤에는 초 단위를 의미하는 s로 끝난다.
# 예를 들어, 로그 문자열 2016-09-15 03:10:33.020 0.011s은 "2016년 9월 15일 오전 3시 10분 **33.010초**"부터 "2016년 9월 15일 오전 3시 10분 **33.020초**"까지 "**0.011초**" 동안 처리된 요청을 의미한다. (처리시간은 시작시간과 끝시간을 포함)
# 서버에는 타임아웃이 3초로 적용되어 있기 때문에 처리시간은 0.001 ≦ T ≦ 3.000이다.
# lines 배열은 응답완료시간 S를 기준으로 오름차순 정렬되어 있다.

# 출력 형식
# solution 함수에서는 로그 데이터 lines 배열에 대해 초당 최대 처리량을 리턴한다.

# 입출력 예제
# 예제1

#     입력: [
#     "2016-09-15 01:00:04.001 2.0s",
#     "2016-09-15 01:00:07.000 2s"
#     ]

#     출력: 1

# 예제2

#     입력: [
#     "2016-09-15 01:00:04.002 2.0s",
#     "2016-09-15 01:00:07.000 2s"
#     ]

#     출력: 2

#     설명: 처리시간은 시작시간과 끝시간을 포함하므로
#     첫 번째 로그는 01:00:02.003 ~ 01:00:04.002에서 2초 동안 처리되었으며,
#     두 번째 로그는 01:00:05.001 ~ 01:00:07.000에서 2초 동안 처리된다.
#     따라서, 첫 번째 로그가 끝나는 시점과 두 번째 로그가 시작하는 시점의 구간인 01:00:04.002 ~ 01:00:05.001 1초 동안 최대 2개가 된다.

# 예제3

#     입력: [
#     "2016-09-15 20:59:57.421 0.351s",
#     "2016-09-15 20:59:58.233 1.181s",
#     "2016-09-15 20:59:58.299 0.8s",
#     "2016-09-15 20:59:58.688 1.041s",
#     "2016-09-15 20:59:59.591 1.412s",
#     "2016-09-15 21:00:00.464 1.466s",
#     "2016-09-15 21:00:00.741 1.581s",
#     "2016-09-15 21:00:00.748 2.31s",
#     "2016-09-15 21:00:00.966 0.381s",
#     "2016-09-15 21:00:02.066 2.62s"
#     ]

#     출력: 7

#     설명: 아래 타임라인 그림에서 빨간색으로 표시된 1초 각 구간의 처리량을 구해보면 (1)은 4개, (2)는 7개, (3)는 2개임을 알 수 있다. 따라서 초당 최대 처리량은 7이 되며, 동일한 최대 처리량을 갖는 1초 구간은 여러 개 존재할 수 있으므로 이 문제에서는 구간이 아닌 개수만 출력한다.

def solution(lines):

    answer = 0
    times=[[0,0] for _ in range(len(lines))]
    process=1
    process_max=0
        
    for i in range(len(lines)):  
        times[i][0]=float(format(float(lines[i].split()[1].split(":")[0])*3600+float(lines[i].split()[1].split(":")[1])*60+float(lines[i].split()[1].split(":")[2])-float(lines[i].split()[2][0:-1])+0.001,'.3f'))
        times[i][1]=float(format(float(lines[i].split()[1].split(":")[0])*3600+float(lines[i].split()[1].split(":")[1])*60+float(lines[i].split()[1].split(":")[2]),'.3f'))

    for i in range(len(times)):
        for j in range(i+1,len(times)):
            if times[j][0]-times[i][1] >=1:
                continue             
            process+=1
            
        if process > process_max:
            process_max=process
        
        process=1
    
    answer=process_max

    return answer

# --------------------------------------------------------------------------------------------------------------------------------------------
# 풀이
# - 1번째
# 1. 추석 당일 하루기 때문에, 24시간 60분 60초 86400개의 값안에서 최대값을 구한다.
# 2. 최대처리량은 로그값의 완료된 시점에서 -1s초 동안 비교하면 되기때문에 N번동안 비교하면 됨. 
# 따라서 시간 복잡도는 O(n)로 해결가능할 듯. 
# 엄청난 메모리가 사용될 것 같아 이 방법은 불가능.

# - 2번째
# 1차원적인 생각을 접고 효과적인 해결방법을 고민하다.
# 1. 각 배열은 완료된 처리 순서대로 정렬 되어있다. 
# 2. 차례대로 처리완료 시간에서 더 큰요소들을 비교 뺀값이 <60초 이면 1초 범위안에 포함되고, 
#    각 값의 처리완료시간을 기준으로 갯수를 카운딩하는 이유는 처리갯수가 최소 1개가 보장되기 때문에
# 3. 시간 복잡도 O(n**2) 다행히 시간초과 판정 X

# -------------------------------------------------------------------------------------------------------------------------------------------- 
# # 문제점:
# 1. 소수점 계산을 제대로 했는데도 뒤에 엄청 작은 쓰레기 값이 붙어서 나옴. 10.001+0.001 = 10.0020000000000004  몇몇 값 때문에 범위를 벗어남.
# 2. 선언한 배열에 다른 값을 넣었는데도 모든 배열 값이 동일하게 나온다. 
# 3. 테스트 3의 예외처리가 뭔지 모르겠다. 찝찝하게 단 하나의 테스트 실패 결과가 나왔다. 아 짜증나.ㅠㅠㅠㅠㅠ

# --------------------------------------------------------------------------------------------------------------------------------------------
# # 해결방법:
# 1. 파이썬의 부동소수점 10.001+0.001 의 값은 10.002가 아니다.
#    따라서 fomat(값 , '.2f')등으로 값을 잘라주고 이것은 문자열로 표현된다는 사실을 기억하자.

# 2. 2차원 배열의 선언: [[0]*2]*len(lines)를 하면 주소값을 공유하게 하게 된다. 마지막 값을 입력하니 모든 공간의 주소가 연결되어있음.
#    따라서 [[0,0] for _ in range(len(lines))]로 선언하여 해결.

# 3. 28개의 테스트 중 1개 미해결, 95.5/100점 짜리 코드라 프로그래머스 점수 안올라감 이거때매 젠장
#    1가지 경우에 수라 왠지 예외처리가 필요한거 같은데 문제를 보면 15일의 데이터가 채워져 있다고 했으니 날짜는 관련 없고.
#    15일 데이터가 아무것도 없을때 return 0을 해줘도 해결이 안된다. 돈내고 풀이는 볼 수 없으니 나중에 찾아보고 나오면 확인하지 모. 

# --------------------------------------------------------------------------------------------------------------------------------------------
# 1시간 풀다 도저히 안되겠어서 다음날 해야지했는데 자다가 유레카해서 그대로 코드를 만들었다.
# 결국은 생각한 알고리즘대로 해서 되었는데 아직 기본기가 부족한 것 같다. 정말 간단한 부분을 이해 못해도 몇시간을 걸쳐 해결 못한다니..
# 중요한 거는 이제는 이 알고리즘이 될까?라고 너무 엄청난 걱정은 안해도 될 것 같다. 문제 이해하기는 어렵지만 천천히 생각하면 풀이는 생각보다 쉽다.
# 이 문제에서도 내가 몰랐던 것들을 2개 이상은 얻었으니, 자만하지말고 꾸준히 문제를 물어야 할 것 같다. 이상.