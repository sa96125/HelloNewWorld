웹브라우저에 움직이는 공들을 생성해보는 프로그램을 만들어보며 기본적인 캔버스를 다루는 예제이다.
다음과 같은 포인트를 배울 수 있다.
1. 캔버스의 이해
2. 이벤트 핸들러
3. 수학적인 연산
4. 모듈화

기능은 다음과 같다.
- 알록달록항 공들을 그린다.
- 공의 방향, 속도, 크기, 색은 랜덤하게 부여된다.
- 마우스와 인접하게 되면 공의 크기가 변하고 범위를 벗어나면 공의 크기는 원래 상태로 돌아간다.

코드를 구성하는 과정은 다음과 같다.
1. 캔버스 할당, 콘텍스트의 선언
var canvas = document.querySelector("canvas");
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;
var pen = canvas.getContext('2d');

window.addEventListener('resize', function (event) {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    init();
})

♦︎♦︎ 리사이즈 이벤트를 사용할 때 실행구문을 다시 시작하게 한다.
내 생각에는 부드럽지 못한 것 같아 리사이즈를 하더라도 원래의 실행구문을 그대로 두는게 괜찮을 것 같다.
☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐


2. 원형을 그리는 arc()함수의 arcuments를 할당.
circleArray = [];

for (var i = 0; i < 200; i++) {
    var x = Math.random() * (innerWidth - (radius * 2)) + radius;
    var y = Math.random() * (innerHeight - (radius * 2)) + radius;
    var dx = (Math.random() - 0.5) * 5;
    var dy = (Math.random() - 0.5) * 5;
    var radius = Math.randon() * 10 + 10;
    circleArray.push(new Circle(x, y, dx, dy, radius));
}

function Circle(x, y, dx, dy, radius) {
    this.x = x;
    this.y = y;
    this.dx = dx;
    this.dy = dy;
    this.radius = radius;
    this.minradius = radius;
    this.color = colorAraay[Math.floor(Math.random() * colorAraay.length)];

    this.draw = function () {
        pen.beginPath();
        pen.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
        // pen.strokeStyle = "orange";
        //pen.stroke();
        pen.fillStyle = this.color;
        // pen.fillStyle = colorAraay[Math.floor(Math.random() * colorAraay.length)]
        pen.fill();
    }

    this.update = function () {
        if (this.x + this.radius > innerWidth || this.x - this.radius < 0) {
            this.dx = -this.dx;
        }
        if (this.y + this.radius > innerHeight || this.y - this.radius < 0) {
            this.dy = -this.dy;
        }
        this.x += this.dx;
        this.y += this.dy;

        if (mouse.x - this.x < 50 && mouse.x - this.x > -50 && mouse.y - this.y < 50 && mouse.y - this.y > -50) {
            if (this.radius < maxradius) {
                this.radius += 1;
            }
        } else if (this.radius > this.minradius) {
            this.radius -= 1;
        }
        this.draw();
    }
}

♦︎♦︎ 현재 객체에는 그리는 함수, 업데이트 함수를 가지고 나중에 캔버스위에서 매서드로 지속적으로 호출된다. 
☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐


3. 공의 객체에는 랜덤하게 생성되고 랜덤하게 움직이는 기본 함수가 필요하다.
function init() {
    circleArray = [];

    for (var i = 0; i < 100; i++) {
        var x = Math.random() * (innerWidth - (radius * 2)) + radius;
        var y = Math.random() * (innerHeight - (radius * 2)) + radius;
        var dx = (Math.random() - 0.5) * 5;
        var dy = (Math.random() - 0.5) * 5;
        var radius = Math.random() * 10 + 10;
        circleArray.push(new Circle(x, y, dx, dy, radius));
    }

}

♦︎♦︎ 랜덤하게 크기, 이동방향을 조정하는 법을 알고, 현재 마우스위치와 공의 범위에 따라 인터랙션하도록 값을 수정
기본적인 인터랙션임에도 불구하고 상당히 재미있는 계산이었고, 이에 관성이나 중력 법칙등 수학적인 요소를 추가해봐야겠다.
☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐


4. 인터랙션을 추가하기위해 이벤트핸들러와 객체와의 관계를 생각한다.
window.addEventListener('mousemove', function (event) {
    mouse.x = event.x;
    mouse.y = event.y;
})

♦︎♦︎ 마우스 핸들러의 오브젝트를 다양하게 사용해봐야겠다. 버튼 클릭, 스크롤 등 유용할 것같다.
☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐

5. 모듈화, 간소화과정을 포함한다.

function animate() {
    requestAnimationFrame(animate);
    pen.clearRect(0, 0, innerWidth, innerHeight);

    for (var i = 0; i < circleArray.length; i++) {
        circleArray[i].draw();
        circleArray[i].update();
    }
}

var circleArray = [];
init();
animate();

♦︎♦︎ 실제적인 실행구문은 다음과 같고, 애니메이트함수를 보면 그리고 수정하고 삭제하는 실질적인 캔버스의 동작과정이 포함되어 있다.
☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐☐



